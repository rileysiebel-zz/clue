package reasoner;

/**
 * SATSolver.java - a simple Java interface to the zchaff SAT solver.
 * See http://cs.gettysburg.edu/~tneller/nsf/clue/ for details.
 *
 * @author Riley Siebel
 * @version 1.0
 *

Copyright (C) 2010 Riley Siebel
 Based on work by Todd Neller

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Information about the GNU General Public License is available online at:
  http://www.gnu.org/licenses/
To receive a copy of the GNU General Public License, write to the Free
Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.

 */

import java.util.*;

import board.Constants;

import solver.Literal;
import solver.MySatSolver;

public class SATSolverGiven 
{
	public static final int FALSE = -1;
	public static final int UNKNOWN = 0;
	public static final int TRUE = 1;

	public ArrayList<Literal[]> clauses = new ArrayList<Literal[]>();
	public ArrayList<Literal[]> queryClauses = new ArrayList<Literal[]>();

	private MySatSolver solver = new MySatSolver();
	public SATSolverGiven() {

	}

	public SATSolverGiven(SATSolverGiven s) {
		for(Literal[] clause : s.clauses)
			addClause(clause);
		for(Literal[] queryClause : s.queryClauses)
			addQueryClause(queryClause);
	}

	public void addClause(Literal[] clause) {
		clauses.add((Literal[]) clause.clone());
	}

	public void clearClauses() {
		clauses.clear();
	}

	public void addQueryClause(Literal[] clause) {
		queryClauses.add((Literal[]) clause.clone());
	}

	public void clearQueryClauses() {
		queryClauses.clear();
	}

	public boolean makeQuery() 
	{
		ArrayList<Literal[]> allClauses = new ArrayList<Literal[]>(clauses);
		allClauses.addAll(queryClauses); 
		
		int max_lit = 0;
		for(Literal[] a : allClauses) {
			for(Literal l : a) {
				if(l.symbol < 0)
					System.out.println(l.symbol);
				if(l.symbol > max_lit)
					max_lit = l.symbol;
			}
		}

		solver.Timer timer = new solver.Timer(Constants.MAX_TIME);
		boolean solves = solver.solve(allClauses, timer, max_lit + 1); 
		
		return solves;
	}

	public int testLiteral(int lit) {
		
		Literal literal = new Literal(lit, true);
		int result = UNKNOWN;
		clearQueryClauses();   
		Literal[] clauseT = {literal};
		addQueryClause(clauseT);
		if (!makeQuery())
			result = FALSE;
		else {
			clearQueryClauses();
			Literal f = new Literal(literal.symbol, !literal.sign);
			Literal[] clauseF = {f};
			addQueryClause(clauseF);
			if (!makeQuery())
				result = TRUE;
		}
		clearQueryClauses();
		return result;
	}       

	public static void main(String[] args) 
	{
// Liar and truth-teller example test code:
//		int[][] clauses = {{-1, -2}, {2, 1}, {-2, -3}, {3, 2}, {-3, -1}, {-3, -2}, {1, 2, 3}};
//	SATSolverGiven s = new SATSolverGiven();
//	for (int i = 0; i < clauses.length; i++)
//		s.addClause(clauses[i]);
//	System.out.println("Knowledge base is satisfiable: " + s.makeQuery());
//	System.out.print("Is Cal a truth-teller? ");
//	int result = s.testLiteral(3);
//	if (result == FALSE)
//		System.out.println("No.");
//	else if (result == TRUE)
//		System.out.println("Yes.");
//	else
//		System.out.println("Unknown."); 
	}
}
